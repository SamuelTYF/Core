//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Compiler.Properties {
    using System;
    
    
    /// <summary>
    ///   一个强类型的资源类，用于查找本地化的字符串等。
    /// </summary>
    // 此类是由 StronglyTypedResourceBuilder
    // 类通过类似于 ResGen 或 Visual Studio 的工具自动生成的。
    // 若要添加或移除成员，请编辑 .ResX 文件，然后重新运行 ResGen
    // (以 /str 作为命令选项)，或重新生成 VS 项目。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   返回此类使用的缓存的 ResourceManager 实例。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Compiler.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   重写当前线程的 CurrentUICulture 属性，对
        ///   使用此强类型资源类的所有资源查找执行重写。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   查找类似 &gt;&gt;&gt;
        ///&lt;Start&gt;-&gt;&lt;File&gt;&apos;EOF&apos;
        ///return Values[0];
        ///
        ///&gt;&gt;&gt;
        ///&lt;Space&gt;-&gt;&apos; &apos;
        ///value=null
        ///
        ///&gt;&gt;&gt;
        ///&lt;Space&gt;-&gt;
        ///value=null
        ///
        ///&gt;&gt;&gt;
        ///&lt;File&gt;-&gt;&lt;FileHeader&gt;&lt;FileBody&gt;
        ///
        ///
        ///&gt;&gt;&gt;
        ///&lt;FileHeader&gt;-&gt;
        ///
        ///&gt;&gt;&gt;
        ///&lt;FileHeader&gt;-&gt;&lt;FileHeader&gt;&lt;UsingNamespace&gt;&lt;Space&gt;
        ///
        ///&gt;&gt;&gt;
        ///&lt;UsingNamespace&gt;-&gt;&apos;using&apos;&apos; &apos;&lt;NamespaceName&gt;&apos;;&apos;
        ///
        ///&gt;&gt;&gt;
        ///&lt;NamespaceName&gt;-&gt;&apos;Symbol&apos;
        ///
        ///&gt;&gt;&gt;
        ///&lt;NamespaceName&gt;-&gt;&lt;NamespaceName&gt;&apos;.&apos;&apos;Symbol&apos;
        ///
        ///&gt;&gt;&gt;
        ///&lt;FileBody&gt;-&gt;&lt;DefineNamespace&gt;
        ///
        ///&gt;&gt;&gt;
        ///&lt;FileBody&gt;-&gt;&lt;DefineNamespace&gt;&lt;Space&gt;&lt;FileBody&gt;
        ///
        ///&gt;&gt;&gt;
        ///&lt;DefineNamespace&gt;-&gt;&apos;namespace&apos;&apos; &apos;&lt;Namesp [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        public static string CSharp_LALR {
            get {
                return ResourceManager.GetString("CSharp_LALR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似  的本地化字符串。
        /// </summary>
        public static string CSharp_LALR_Init {
            get {
                return ResourceManager.GetString("CSharp_LALR_Init", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似  的本地化字符串。
        /// </summary>
        public static string CSharp_LALR_Method {
            get {
                return ResourceManager.GetString("CSharp_LALR_Method", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 &gt;&gt;&gt;命名
        ///[a-zA-Z][0-9a-zA-Z_]*
        ///token = Keys.Contains(Value.ToString()) ? (new(Value.ToString())) : Token.Symbol(Value.ToString());
        ///
        ///&gt;&gt;&gt;强制命名
        ///@[0-9a-zA-Z]+
        ///if(Keys.Contains(Value.ToString()[1..]))token = Token.Symbol(Value.ToString()[1..]);else return Error(symbol);
        ///
        ///&gt;&gt;&gt;间隔
        ///[\t\n\r\s]+
        ///token = new(&quot;Space&quot;);
        ///
        ///&gt;&gt;&gt;符号
        ///([\+\-\*/&lt;&gt;=!^@\|;,\(\)\[\]{}?:%.]|&lt;=|&gt;=|==|!=|\+\+|\-\-|@@|\|\||??|.?|=&gt;)
        ///token = new(Value.ToString());
        ///
        ///&gt;&gt;&gt;有符号整数
        ///(|\-)0*(0|[1-9][0-9]*)
        ///token = Token.Int32(int.Parse(Value.ToString( [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        public static string CSharp_Token {
            get {
                return ResourceManager.GetString("CSharp_Token", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 private static readonly HashSet&lt;string&gt; Keys=new(new string[]{
        ///	&quot;public&quot;,
        ///	&quot;private&quot;,
        ///	&quot;class&quot;,
        ///	&quot;int&quot;,
        ///	&quot;void&quot;
        ///}); 的本地化字符串。
        /// </summary>
        public static string CSharp_Token_Method {
            get {
                return ResourceManager.GetString("CSharp_Token_Method", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 &gt;&gt;&gt;Terminal
        ///&apos;[\x20-\x26\x28-\xFFFF]*&apos;
        ///token=Token.Terminal(Value.ToString()[1..^1]);
        ///
        ///&gt;&gt;&gt;Define Symbol
        ///\-&gt;
        ///token=new(&quot;Define&quot;);
        ///
        ///&gt;&gt;&gt;Variable
        ///&lt;[\x20-\x3D\x3F-\xFFFF]*&gt;
        ///token=Token.Variable(Value.ToString()[1..^1]); 的本地化字符串。
        /// </summary>
        public static string LALR_Token {
            get {
                return ResourceManager.GetString("LALR_Token", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 public class _Parser:IParser&lt;TToken, TValue, TResult&gt;
        ///{
        ///    public static readonly int[,] VariableTable={
        ///        //VariableTable
        ///    };
        ///    public override TResult Parse(ITokenizer&lt;TToken&gt; tokenizer)
        ///    {
        ///        Init();
        ///        //Init
        ///        TToken token = tokenizer.Get();
        ///        int symbol = 0;
        ///        bool mode = true;
        ///        TToken[] tokens;
        ///        TValue[] values;
        ///        TValue value;
        ///        while (true)
        ///        {
        ///            if (mode)
        ///            {
        ///                switch (St [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        public static string Parser {
            get {
                return ResourceManager.GetString("Parser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 &gt;&gt;&gt;
        ///&lt;Start&gt;-&gt;&lt;R&gt;&apos;EOF&apos;
        ///return new(Values[0],CharBlocks.ToArray());
        ///
        ///&gt;&gt;&gt;
        ///&lt;R&gt;-&gt;
        ///value=new RE_Block();
        ///
        ///&gt;&gt;&gt;
        ///&lt;R&gt;-&gt;&lt;R&gt;&lt;S&gt;
        ///value=Values[0];
        ///(value as RE_Block).Values.Add(Values[1]);
        ///
        ///&gt;&gt;&gt;
        ///&lt;R&gt;-&gt;&lt;R&gt;&lt;E&gt;
        ///value=Values[0];
        ///(value as RE_Block).Values.Add(Values[1]);
        ///
        ///&gt;&gt;&gt;
        ///&lt;E&gt;-&gt;&lt;S&gt;&apos;*&apos;
        ///value=new RE_Closure(Values[0]);
        ///
        ///&gt;&gt;&gt;
        ///&lt;E&gt;-&gt;&lt;S&gt;&apos;+&apos;
        ///value=new RE_PositiveClosure(Values[0]);
        ///
        ///&gt;&gt;&gt;
        ///&lt;S&gt;-&gt;&apos;Char&apos;
        ///value=new RE_Char(Values[0].Value);
        ///CharBlocks.Add(value);
        ///
        ///&gt;&gt;&gt;
        ///&lt;S&gt;-&gt;&lt;OB&gt;
        ///value=Values[0];
        ///
        ///&gt;&gt;&gt;
        ///&lt;S [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        public static string RE_LALR {
            get {
                return ResourceManager.GetString("RE_LALR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 CharBlocks = new(); 的本地化字符串。
        /// </summary>
        public static string RE_LALR_Init {
            get {
                return ResourceManager.GetString("RE_LALR_Init", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 private List&lt;IRE_Block&gt; CharBlocks; 的本地化字符串。
        /// </summary>
        public static string RE_LALR_Method {
            get {
                return ResourceManager.GetString("RE_LALR_Method", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 &gt;&gt;&gt;
        ///[\x01-\x27\x2C\x2E-\x5A\x5E-\x7B\x7D\x7E-\xFFFF]
        ///token=new Token(Value[0]);
        ///
        ///&gt;&gt;&gt;
        ///[\[\-\]\(\|\)\*\+\\]
        ///token=new Token(Value);
        ///
        ///&gt;&gt;&gt;
        ///\\[\[\-\]\(\|\)\*\+\\]
        ///token=new Token(Value[1]);
        ///
        ///&gt;&gt;&gt;
        ///\\d[0-9]+
        ///token=new Token((char)int.Parse(Value.ToString()[2..]));
        ///
        ///&gt;&gt;&gt;
        ///\\x[0-9a-zA-Z]+
        ///token=new Token((char)int.Parse(Value.ToString()[2..],System.Globalization.NumberStyles.HexNumber));
        ///
        ///&gt;&gt;&gt;
        ///\\a
        ///token=new Token(&apos;\a&apos;)
        ///
        ///&gt;&gt;&gt;
        ///\\b
        ///token=new Token(&apos;\b&apos;)
        ///
        ///&gt;&gt;&gt;
        ///\\t
        ///token=new Token(&apos;\t&apos;)
        ///
        ///&gt;&gt;&gt;
        ///\\ [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        public static string RE_Token {
            get {
                return ResourceManager.GetString("RE_Token", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///namespace Test
        ///{
        ///    public static class Program
        ///    {
        ///        public void Test()
        ///        {
        ///            Console.WriteLine(0);
        ///            Console.WriteLine(123);
        ///            Console.WriteLine(-987);
        ///            Console.WriteLine(0x12aF);
        ///            Console.WriteLine(0b101);
        ///            Console.WriteLine(0.1e001);
        ///            Console.WriteLine(-12.1e-12);
        ///            Console.WriteLine(@&quot;12\t\0\\&quot;);
        ///            Console.WriteLine(&apos;\&apos;&apos;);
        ///            Console.WriteLine(&apos;&quot;&apos;);
        ///       [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        public static string Test_Code {
            get {
                return ResourceManager.GetString("Test_Code", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 &gt;&gt;&gt;
        ///&lt;Start&gt;-&gt;&lt;S&gt;&apos;EOF&apos;
        ///
        ///&gt;&gt;&gt;
        ///&lt;S&gt;-&gt;&apos;0&apos;&lt;S&gt;&apos;0&apos;
        ///
        ///&gt;&gt;&gt;
        ///&lt;S&gt;-&gt;&apos;1&apos;&lt;S&gt;&apos;1&apos;
        ///
        ///&gt;&gt;&gt;
        ///&lt;S&gt;-&gt;&apos;0&apos;&apos;1&apos;
        /// 的本地化字符串。
        /// </summary>
        public static string Test_LALR {
            get {
                return ResourceManager.GetString("Test_LALR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 public class _Tokenizer:ITokenizer&lt;TToken&gt;
        ///{
        ///	public _Tokenizer(Encoding encoding,int length=1&lt;&lt;10):base(encoding,length){}
        ///	public _Tokenizer(int length = 1 &lt;&lt; 10) : base(length) { }
        ///	public override TToken Get()
        ///	{
        ///		TToken token;
        ///		while(true)
        ///		{
        ///			char symbol = Peek();
        ///			switch (State)
        ///			{
        ///				//StateCode
        ///				default:
        ///					return Error(symbol);
        ///			}
        ///		}
        ///	}
        ///	//Method
        ///} 的本地化字符串。
        /// </summary>
        public static string Tokenizer {
            get {
                return ResourceManager.GetString("Tokenizer", resourceCulture);
            }
        }
    }
}
