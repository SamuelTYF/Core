>>>命名
[a-zA-Z][0-9a-zA-Z_]*
token = Keys.Contains(Value.ToString()) ? (new(Value.ToString())) : Token.Symbol(Value.ToString());

>>>强制命名
@[0-9a-zA-Z]+
if(Keys.Contains(Value.ToString()[1..]))token = Token.Symbol(Value.ToString()[1..]);else return Error(symbol);

>>>间隔
[\t\n\r\s]+
token = new(" ");

>>>符号
([\+\-\*/%<>=!^@\|&;,\(\)\[\]{}?:.]|<=|>=|==|!=|\+\+|\-\-|\+=|\-=|\|\||&&|.?|=>)
token = new(Value.ToString());

>>>有符号整数
(|\-)0*(0|[1-9][0-9]*)
token = Token.Int32(int.Parse(Value.ToString()));

>>>十六进制无符号整数
0x[0-9a-fA-F]+
token = Token.UInt32(uint.Parse(Value.ToString()[2..],System.Globalization.NumberStyles.HexNumber));

>>>二进制无符号整数
0b[01]+
token = Token.UInt32(Convert.ToUInt32(Value.ToString()[2..],2));

>>>浮点数
(|\-)[0-9]+.[0-9]+(|e(|\-)[0-9]+)
token = Token.Double(double.Parse(Value.ToString()));

>>>不转义字符串
@"[\x1-\x21\x23-\xFFFF]*"
token = Token.String(Value.ToString()[2..^1]);

>>>字符,除控制字符 ' \外
'[\x20-\x26\x28-\x5B\x5D-\xFFFF]'
token = Token.Char(Value[1]);

>>>转义字符
'\\0'
token = Token.Char('\0');

>>>转义字符
'\\a'
token = Token.Char('\a');

>>>转义字符
'\\b'
token = Token.Char('\b');

>>>转义字符
'\\t'
token = Token.Char('\t');

>>>转义字符
'\\n'
token = Token.Char('\n');

>>>转义字符
'\\v'
token = Token.Char('\v');

>>>转义字符
'\\f'
token = Token.Char('\f');

>>>转义字符
'\\r'
token = Token.Char('\r');

>>>转义字符
'\\''
token = Token.Char('\'');

>>>转义字符
'\\\\'
token = Token.Char('\\');

>>>转义字符
'\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]'
token = Token.Char((char)int.Parse(Value.ToString()[3..6],System.Globalization.NumberStyles.HexNumber));

>>>字符串
"
StringBuilder sb=new();
char? c;
do{
    CharState=0;
    c=GetChar();
    if (c.HasValue) sb.Append(c.Value);
    else return Error(symbol);
}while(Peek()!='"');
token = Token.String(sb.ToString());
Index++;
