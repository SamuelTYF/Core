using CSharpCompiler.Metadata;
using CSharpCompiler.Searching;
using Compiler;

namespace CSharpCompiler
{
	public class CSharp_Parser:IParser<Token, object, ParsingFile>
	{
	    public static readonly int[,] VariableTable={
	        {-1,1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,21,-1,-1,-1,-1,-1,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,24,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,36,-1,-1,-1,-1,-1,-1,-1,-1,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,39,40,41,-1,-1,-1,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,54,55,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,59,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,60,61,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,101,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,102,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,105,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,127,128,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,129,130,131,132,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,133,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,134,135,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,138,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,139,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,140,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,141,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,142,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,143,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,144,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,145,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,146,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,147,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,148,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,149,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,150,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,151,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,152,98,99,100,153,154,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,158,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,160,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,162,55,56,-1,-1,-1,-1,-1,163,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,166,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,167,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,168,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,169,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,170,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,171,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,172,93,94,95,96,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,173,93,94,95,96,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,174,95,96,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,175,95,96,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,176,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,177,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,178,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,181,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,182,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,185,128,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,129,130,131,132,186,-1},
			{-1,-1,187,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,189,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,190,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,192,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,193,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,194,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,195,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,196},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,197,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,198,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,162,55,56,-1,-1,-1,-1,-1,200,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,201,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,151,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,202,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,206,128,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,129,130,131,132,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,209,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,210,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,211,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,212,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,213,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,214,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,215,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,216,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,185,128,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,129,130,131,132,217,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,185,128,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,129,130,131,132,219,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,221,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,222,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,223,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,224,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,-1,226,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,228,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,185,128,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,129,130,131,132,231,-1},
			{-1,-1,232,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,55,56,-1,-1,-1,-1,-1,-1,-1,185,128,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,98,99,100,-1,-1,129,130,131,132,233,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}
	    };
	    public override ParsingFile Parse(ITokenizer<Token> tokenizer)
	    {
	        Init();
	        File=new();
			Root=new();
			Root.LoadAssembly(typeof(string).Assembly,typeof(Console).Assembly);
			Root.Lock();
	        Token token = tokenizer.Get();
	        int symbol = 0;
	        bool mode = true;
	        Token[] tokens;
	        object[] values;
	        object value;
	        while (true)
	        {
	            if (mode)
	            {
	                switch (StateStack.Peek())
	                {
	                    case 0:
							if(token.Type is "EOF" or "using" or "namespace")
							{
								
								ValueStack.Push(null);
								symbol=3;
								mode = false;
							}
							else return Error(token);
						break;
						case 1:
							if(token.Type is "EOF")
							{
								values=PopValue(1);
								File.Build(new(Root));
								return File;
								ValueStack.Push(null);
								symbol=0;
								mode = false;
							}
							else return Error(token);
						break;
						case 2:
							if(token.Type is "using")
							{
								TokenStack.Push(token);
								StateStack.Push(3);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "EOF" or "namespace")
							{
								Namespace=new();
								ValueStack.Push(null);
								symbol=4;
								mode = false;
							}
							else return Error(token);
						break;
						case 3:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(6);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 4:
							if(token.Type is "namespace")
							{
								TokenStack.Push(token);
								StateStack.Push(7);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "EOF")
							{
								values=PopValue(2);
								
								ValueStack.Push(null);
								symbol=1;
								mode = false;
							}
							else return Error(token);
						break;
						case 5:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "EOF" or "using" or "namespace")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 6:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(11);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 7:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(13);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 8:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "EOF" or "namespace")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 9:
							if(token.Type is "EOF" or "using" or ";" or "Symbol" or "namespace" or "{" or "}" or "class" or "public" or "static" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or ")" or "," or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if" or "else")
							{
								tokens=PopToken(1);
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 10:
							if(token.Type is "EOF" or "using" or "namespace")
							{
								values=PopValue(3);
								
								ValueStack.Push(null);
								symbol=3;
								mode = false;
							}
							else return Error(token);
						break;
						case 11:
							if(token.Type is " " or ";" or "." or "{")
							{
								tokens=PopToken(1);
								NamespaceName=new();
								NamespaceName.Add(tokens[0].Value_String);
								ValueStack.Push(null);
								symbol=6;
								mode = false;
							}
							else return Error(token);
						break;
						case 12:
							if(token.Type is ";")
							{
								TokenStack.Push(token);
								StateStack.Push(15);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ".")
							{
								TokenStack.Push(token);
								StateStack.Push(16);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 13:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(11);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 14:
							if(token.Type is "EOF" or "namespace")
							{
								values=PopValue(3);
								File.InsertNamespace(Namespace);
								Namespace=new();
								ValueStack.Push(null);
								symbol=4;
								mode = false;
							}
							else return Error(token);
						break;
						case 15:
							if(token.Type is "EOF" or " " or "using" or "namespace")
							{
								tokens=PopToken(3);
								values=PopValue(1);
								UsingNamespace();
								ValueStack.Push(null);
								symbol=5;
								mode = false;
							}
							else return Error(token);
						break;
						case 16:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(18);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 17:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ".")
							{
								TokenStack.Push(token);
								StateStack.Push(16);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "{")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 18:
							if(token.Type is " " or ";" or "." or "{")
							{
								tokens=PopToken(2);
								values=PopValue(1);
								NamespaceName.Add(tokens[1].Value_String);
								ValueStack.Push(null);
								symbol=6;
								mode = false;
							}
							else return Error(token);
						break;
						case 19:
							if(token.Type is "{")
							{
								TokenStack.Push(token);
								StateStack.Push(20);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 20:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "}" or "class" or "public" or "static")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 21:
							if(token.Type is "}" or "class" or "public" or "static")
							{
								values=PopValue(1);
								Type=new();
								ValueStack.Push(null);
								symbol=8;
								mode = false;
							}
							else return Error(token);
						break;
						case 22:
							if(token.Type is "}")
							{
								TokenStack.Push(token);
								StateStack.Push(23);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "class" or "public" or "static")
							{
								value=new List<string>();
								ValueStack.Push(value);
								symbol=10;
								mode = false;
							}
							else return Error(token);
						break;
						case 23:
							if(token.Type is "EOF" or " " or "namespace")
							{
								tokens=PopToken(4);
								values=PopValue(3);
								DefineNamespace();
								ValueStack.Push(null);
								symbol=7;
								mode = false;
							}
							else return Error(token);
						break;
						case 24:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "}" or "class" or "public" or "static")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 25:
							if(token.Type is "class")
							{
								TokenStack.Push(token);
								StateStack.Push(27);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "public")
							{
								TokenStack.Push(token);
								StateStack.Push(28);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "static")
							{
								TokenStack.Push(token);
								StateStack.Push(29);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 26:
							if(token.Type is "}" or "class" or "public" or "static")
							{
								values=PopValue(3);
								Namespace.InsertType(Type);
								Type=new();
								ValueStack.Push(null);
								symbol=8;
								mode = false;
							}
							else return Error(token);
						break;
						case 27:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(30);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 28:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(31);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 29:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(32);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 30:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(33);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 31:
							if(token.Type is "class" or "public" or "static")
							{
								tokens=PopToken(2);
								values=PopValue(1);
								value=values[0];
								(value as List<string>).Add(tokens[0].Type);
								ValueStack.Push(value);
								symbol=10;
								mode = false;
							}
							else return Error(token);
						break;
						case 32:
							if(token.Type is "class" or "public" or "static")
							{
								tokens=PopToken(2);
								values=PopValue(1);
								value=values[0];
								(value as List<string>).Add(tokens[0].Type);
								ValueStack.Push(value);
								symbol=10;
								mode = false;
							}
							else return Error(token);
						break;
						case 33:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "{")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 34:
							if(token.Type is "{")
							{
								TokenStack.Push(token);
								StateStack.Push(35);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 35:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "}" or "public" or "static" or "void" or "char" or "byte" or "int" or "double" or "string")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 36:
							if(token.Type is "Symbol" or "}" or "public" or "static" or "void" or "char" or "byte" or "int" or "double" or "string")
							{
								values=PopValue(1);
								Field=new();
								Method=new();
								ValueStack.Push(null);
								symbol=11;
								mode = false;
							}
							else return Error(token);
						break;
						case 37:
							if(token.Type is "}")
							{
								TokenStack.Push(token);
								StateStack.Push(38);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "public" or "static" or "void" or "char" or "byte" or "int" or "double" or "string")
							{
								value=new List<string>();
								ValueStack.Push(value);
								symbol=14;
								mode = false;
							}
							else return Error(token);
						break;
						case 38:
							if(token.Type is " " or "}" or "class" or "public" or "static")
							{
								tokens=PopToken(5);
								values=PopValue(3);
								Type.Name=tokens[2].Value_String;
								Type.UpdateAttributes(values[0] as List<string>);
								ValueStack.Push(null);
								symbol=9;
								mode = false;
							}
							else return Error(token);
						break;
						case 39:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "}" or "public" or "static" or "void" or "char" or "byte" or "int" or "double" or "string")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 40:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "}" or "public" or "static" or "void" or "char" or "byte" or "int" or "double" or "string")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 41:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "public")
							{
								TokenStack.Push(token);
								StateStack.Push(46);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "static")
							{
								TokenStack.Push(token);
								StateStack.Push(47);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 42:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";")
							{
								TokenStack.Push(token);
								StateStack.Push(57);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "=>")
							{
								TokenStack.Push(token);
								StateStack.Push(58);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "{")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 43:
							if(token.Type is "Symbol" or "}" or "public" or "static" or "void" or "char" or "byte" or "int" or "double" or "string")
							{
								values=PopValue(3);
								Type.InsertField(Field);
								Field=new();
								ValueStack.Push(null);
								symbol=11;
								mode = false;
							}
							else return Error(token);
						break;
						case 44:
							if(token.Type is "Symbol" or "}" or "public" or "static" or "void" or "char" or "byte" or "int" or "double" or "string")
							{
								values=PopValue(3);
								Type.InsertMethod(Method);
								Method=new();
								ValueStack.Push(null);
								symbol=11;
								mode = false;
							}
							else return Error(token);
						break;
						case 45:
							if(token.Type is " " or ";" or "." or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(1);
								value=new List<string>();
								(value as List<string>).Add(tokens[0].Value_String);
								ValueStack.Push(value);
								symbol=17;
								mode = false;
							}
							else return Error(token);
						break;
						case 46:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(62);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 47:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(63);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 48:
							if(token.Type is " " or ";" or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(1);
								value=new string[]{"System","Void"};
								ValueStack.Push(value);
								symbol=15;
								mode = false;
							}
							else return Error(token);
						break;
						case 49:
							if(token.Type is " " or ";" or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(1);
								value=new string[]{"System","Char"};
								ValueStack.Push(value);
								symbol=16;
								mode = false;
							}
							else return Error(token);
						break;
						case 50:
							if(token.Type is " " or ";" or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(1);
								value=new string[]{"System","Byte"};
								ValueStack.Push(value);
								symbol=16;
								mode = false;
							}
							else return Error(token);
						break;
						case 51:
							if(token.Type is " " or ";" or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(1);
								value=new string[]{"System","Int32"};
								ValueStack.Push(value);
								symbol=16;
								mode = false;
							}
							else return Error(token);
						break;
						case 52:
							if(token.Type is " " or ";" or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(1);
								value=new string[]{"System","Double"};
								ValueStack.Push(value);
								symbol=16;
								mode = false;
							}
							else return Error(token);
						break;
						case 53:
							if(token.Type is " " or ";" or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(1);
								value=new string[]{"System","String"};
								ValueStack.Push(value);
								symbol=16;
								mode = false;
							}
							else return Error(token);
						break;
						case 54:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(64);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 55:
							if(token.Type is " " or ";" or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=15;
								mode = false;
							}
							else return Error(token);
						break;
						case 56:
							if(token.Type is ".")
							{
								TokenStack.Push(token);
								StateStack.Push(65);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is " " or ";" or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								values=PopValue(1);
								value=(values[0] as List<string>).ToArray();
								ValueStack.Push(value);
								symbol=15;
								mode = false;
							}
							else return Error(token);
						break;
						case 57:
							if(token.Type is " " or "Symbol" or "}" or "public" or "static" or "void" or "char" or "byte" or "int" or "double" or "string")
							{
								tokens=PopToken(1);
								values=PopValue(1);
								Method.IsAbstract=true;
								ValueStack.Push(null);
								symbol=13;
								mode = false;
							}
							else return Error(token);
						break;
						case 58:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 59:
							if(token.Type is "{")
							{
								TokenStack.Push(token);
								StateStack.Push(67);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 60:
							if(token.Type is ";")
							{
								TokenStack.Push(token);
								StateStack.Push(68);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 61:
							if(token.Type is " " or "Symbol" or "}" or "public" or "static" or "void" or "char" or "byte" or "int" or "double" or "string")
							{
								values=PopValue(2);
								
								ValueStack.Push(null);
								symbol=13;
								mode = false;
							}
							else return Error(token);
						break;
						case 62:
							if(token.Type is "Symbol" or "public" or "static" or "void" or "char" or "byte" or "int" or "double" or "string")
							{
								tokens=PopToken(2);
								values=PopValue(1);
								value=values[0];
								(value as List<string>).Add(tokens[0].Type);
								ValueStack.Push(value);
								symbol=14;
								mode = false;
							}
							else return Error(token);
						break;
						case 63:
							if(token.Type is "Symbol" or "public" or "static" or "void" or "char" or "byte" or "int" or "double" or "string")
							{
								tokens=PopToken(2);
								values=PopValue(1);
								value=values[0];
								(value as List<string>).Add(tokens[0].Type);
								ValueStack.Push(value);
								symbol=14;
								mode = false;
							}
							else return Error(token);
						break;
						case 64:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(69);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 65:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(70);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 66:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 67:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 68:
							if(token.Type is " " or "Symbol" or "}" or "public" or "static" or "void" or "char" or "byte" or "int" or "double" or "string")
							{
								tokens=PopToken(1);
								values=PopValue(2);
								Method.Lambda=true;
								ValueStack.Push(null);
								symbol=13;
								mode = false;
							}
							else return Error(token);
						break;
						case 69:
							if(token.Type is ";")
							{
								TokenStack.Push(token);
								StateStack.Push(103);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(104);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 70:
							if(token.Type is " " or ";" or "." or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(2);
								values=PopValue(1);
								value=values[0];
								(value as List<string>).Add(tokens[1].Value_String);
								ValueStack.Push(value);
								symbol=17;
								mode = false;
							}
							else return Error(token);
						break;
						case 71:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 72:
							if(token.Type is ";" or "." or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(1);
								value=new Command_Constant_UInt32(tokens[0].Value_UInt32.Value);
								ValueStack.Push(value);
								symbol=46;
								mode = false;
							}
							else return Error(token);
						break;
						case 73:
							if(token.Type is ";" or "." or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(1);
								value=new Command_Constant_Int32(tokens[0].Value_Int32.Value);
								ValueStack.Push(value);
								symbol=46;
								mode = false;
							}
							else return Error(token);
						break;
						case 74:
							if(token.Type is ";" or "." or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(1);
								value=new Command_Constant_Double(tokens[0].Value_Double.Value);
								ValueStack.Push(value);
								symbol=46;
								mode = false;
							}
							else return Error(token);
						break;
						case 75:
							if(token.Type is ";" or "." or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(1);
								value=new Command_Constant_Char(tokens[0].Value_Char.Value);
								ValueStack.Push(value);
								symbol=46;
								mode = false;
							}
							else return Error(token);
						break;
						case 76:
							if(token.Type is ";" or "." or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(1);
								value=new Command_Constant_String(tokens[0].Value_String);
								ValueStack.Push(value);
								symbol=46;
								mode = false;
							}
							else return Error(token);
						break;
						case 77:
							if(token.Type is ";" or "." or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(1);
								value=new Command_Constant_Boolean(true);
								ValueStack.Push(value);
								symbol=46;
								mode = false;
							}
							else return Error(token);
						break;
						case 78:
							if(token.Type is ";" or "." or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(1);
								value=new Command_Constant_Boolean(false);
								ValueStack.Push(value);
								symbol=46;
								mode = false;
							}
							else return Error(token);
						break;
						case 79:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(106);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								values=PopValue(1);
								value=new Command_Load(values[0] as string[]);
								ValueStack.Push(value);
								symbol=47;
								mode = false;
							}
							else return Error(token);
						break;
						case 80:
							if(token.Type is ";")
							{
								tokens=PopToken(1);
								values=PopValue(2);
								Method.Commands.Add(values[1] as ICommand);
								ValueStack.Push(null);
								symbol=19;
								mode = false;
							}
							else return Error(token);
						break;
						case 81:
							if(token.Type is ";" or ")" or ",")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=26;
								mode = false;
							}
							else return Error(token);
						break;
						case 82:
							if(token.Type is "=")
							{
								TokenStack.Push(token);
								StateStack.Push(107);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or ")" or ",")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=26;
								mode = false;
							}
							else return Error(token);
						break;
						case 83:
							if(token.Type is ";" or ")" or "," or "=" or ":")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=28;
								mode = false;
							}
							else return Error(token);
						break;
						case 84:
							if(token.Type is "?")
							{
								TokenStack.Push(token);
								StateStack.Push(108);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "||")
							{
								TokenStack.Push(token);
								StateStack.Push(109);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or ")" or "," or "=" or ":")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=28;
								mode = false;
							}
							else return Error(token);
						break;
						case 85:
							if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=30;
								mode = false;
							}
							else return Error(token);
						break;
						case 86:
							if(token.Type is "&&")
							{
								TokenStack.Push(token);
								StateStack.Push(110);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=30;
								mode = false;
							}
							else return Error(token);
						break;
						case 87:
							if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=32;
								mode = false;
							}
							else return Error(token);
						break;
						case 88:
							if(token.Type is "==")
							{
								TokenStack.Push(token);
								StateStack.Push(111);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "!=")
							{
								TokenStack.Push(token);
								StateStack.Push(112);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=32;
								mode = false;
							}
							else return Error(token);
						break;
						case 89:
							if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=34;
								mode = false;
							}
							else return Error(token);
						break;
						case 90:
							if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=34;
								mode = false;
							}
							else return Error(token);
						break;
						case 91:
							if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=36;
								mode = false;
							}
							else return Error(token);
						break;
						case 92:
							if(token.Type is "<")
							{
								TokenStack.Push(token);
								StateStack.Push(113);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ">")
							{
								TokenStack.Push(token);
								StateStack.Push(114);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "+")
							{
								TokenStack.Push(token);
								StateStack.Push(115);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "-")
							{
								TokenStack.Push(token);
								StateStack.Push(116);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=36;
								mode = false;
							}
							else return Error(token);
						break;
						case 93:
							if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=38;
								mode = false;
							}
							else return Error(token);
						break;
						case 94:
							if(token.Type is "*")
							{
								TokenStack.Push(token);
								StateStack.Push(117);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "/")
							{
								TokenStack.Push(token);
								StateStack.Push(118);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "%")
							{
								TokenStack.Push(token);
								StateStack.Push(119);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=38;
								mode = false;
							}
							else return Error(token);
						break;
						case 95:
							if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=40;
								mode = false;
							}
							else return Error(token);
						break;
						case 96:
							if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(120);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=40;
								mode = false;
							}
							else return Error(token);
						break;
						case 97:
							if(token.Type is ";" or "." or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=45;
								mode = false;
							}
							else return Error(token);
						break;
						case 98:
							if(token.Type is ".")
							{
								TokenStack.Push(token);
								StateStack.Push(121);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=42;
								mode = false;
							}
							else return Error(token);
						break;
						case 99:
							if(token.Type is ";" or "." or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=45;
								mode = false;
							}
							else return Error(token);
						break;
						case 100:
							if(token.Type is ";" or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=42;
								mode = false;
							}
							else return Error(token);
						break;
						case 101:
							if(token.Type is "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if")
							{
								values=PopValue(1);
								
								ValueStack.Push(null);
								symbol=24;
								mode = false;
							}
							else return Error(token);
						break;
						case 102:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "}")
							{
								TokenStack.Push(token);
								StateStack.Push(122);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "for")
							{
								TokenStack.Push(token);
								StateStack.Push(123);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "while")
							{
								TokenStack.Push(token);
								StateStack.Push(124);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "do")
							{
								TokenStack.Push(token);
								StateStack.Push(125);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "if")
							{
								TokenStack.Push(token);
								StateStack.Push(126);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 103:
							if(token.Type is " " or "Symbol" or "}" or "public" or "static" or "void" or "char" or "byte" or "int" or "double" or "string")
							{
								tokens=PopToken(3);
								values=PopValue(2);
								Field.Name=tokens[1].Value_String;
								Field.TypeFullName=values[1] as string[];
								Field.UpdateAttributes(values[0] as List<string>);
								ValueStack.Push(null);
								symbol=12;
								mode = false;
							}
							else return Error(token);
						break;
						case 104:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or ")")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 105:
							if(token.Type is ")")
							{
								TokenStack.Push(token);
								StateStack.Push(136);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 106:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(137);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 107:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 108:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 109:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 110:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 111:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 112:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 113:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 114:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 115:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 116:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 117:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 118:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 119:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 120:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ")")
							{
								value=new List<ICommand>();
								ValueStack.Push(value);
								symbol=44;
								mode = false;
							}
							else return Error(token);
						break;
						case 121:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(155);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 122:
							if(token.Type is " " or "Symbol" or "}" or "public" or "static" or "void" or "char" or "byte" or "int" or "double" or "string")
							{
								tokens=PopToken(2);
								values=PopValue(2);
								
								ValueStack.Push(null);
								symbol=20;
								mode = false;
							}
							else return Error(token);
						break;
						case 123:
							if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(156);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 124:
							if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(157);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 125:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or "Symbol" or "{" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 126:
							if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(159);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 127:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 128:
							if(token.Type is ";")
							{
								TokenStack.Push(token);
								StateStack.Push(161);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 129:
							if(token.Type is " " or "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if" or "else")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=25;
								mode = false;
							}
							else return Error(token);
						break;
						case 130:
							if(token.Type is " " or "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if" or "else")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=25;
								mode = false;
							}
							else return Error(token);
						break;
						case 131:
							if(token.Type is " " or "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if" or "else")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=25;
								mode = false;
							}
							else return Error(token);
						break;
						case 132:
							if(token.Type is " " or "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if" or "else")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=25;
								mode = false;
							}
							else return Error(token);
						break;
						case 133:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ")")
							{
								values=PopValue(1);
								
								ValueStack.Push(null);
								symbol=21;
								mode = false;
							}
							else return Error(token);
						break;
						case 134:
							if(token.Type is ")")
							{
								TokenStack.Push(token);
								StateStack.Push(164);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 135:
							if(token.Type is ",")
							{
								TokenStack.Push(token);
								StateStack.Push(165);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ")")
							{
								values=PopValue(1);
								
								ValueStack.Push(null);
								symbol=21;
								mode = false;
							}
							else return Error(token);
						break;
						case 136:
							if(token.Type is ";" or "." or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(2);
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=43;
								mode = false;
							}
							else return Error(token);
						break;
						case 137:
							if(token.Type is ";" or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(2);
								values=PopValue(1);
								Method.RegisterVariable(values[0] as string[],tokens[1].Value_String);
								value=new Command_Load(tokens[1].Value_String);
								ValueStack.Push(value);
								symbol=47;
								mode = false;
							}
							else return Error(token);
						break;
						case 138:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 139:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 140:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 141:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 142:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 143:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 144:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 145:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 146:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 147:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 148:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 149:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 150:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 151:
							if(token.Type is ")" or ",")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=49;
								mode = false;
							}
							else return Error(token);
						break;
						case 152:
							if(token.Type is ")")
							{
								TokenStack.Push(token);
								StateStack.Push(179);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 153:
							if(token.Type is ",")
							{
								TokenStack.Push(token);
								StateStack.Push(180);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ")")
							{
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=44;
								mode = false;
							}
							else return Error(token);
						break;
						case 154:
							if(token.Type is ")" or ",")
							{
								values=PopValue(1);
								value=new List<ICommand>();
								(value as List<ICommand>).Add(values[0] as ICommand);
								ValueStack.Push(value);
								symbol=48;
								mode = false;
							}
							else return Error(token);
						break;
						case 155:
							if(token.Type is ";" or "." or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(2);
								values=PopValue(1);
								value=new Command_Get(values[0] as ICommand,tokens[1].Value_String);
								ValueStack.Push(value);
								symbol=43;
								mode = false;
							}
							else return Error(token);
						break;
						case 156:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 157:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 158:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "for")
							{
								TokenStack.Push(token);
								StateStack.Push(123);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "while")
							{
								TokenStack.Push(token);
								StateStack.Push(124);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "do")
							{
								TokenStack.Push(token);
								StateStack.Push(125);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "if")
							{
								TokenStack.Push(token);
								StateStack.Push(126);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";")
							{
								TokenStack.Push(token);
								StateStack.Push(183);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "{")
							{
								TokenStack.Push(token);
								StateStack.Push(184);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 159:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 160:
							if(token.Type is "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if")
							{
								values=PopValue(3);
								Method.Commands.Add(values[1] as ICommand);
								ValueStack.Push(null);
								symbol=24;
								mode = false;
							}
							else return Error(token);
						break;
						case 161:
							if(token.Type is " " or "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if" or "else")
							{
								tokens=PopToken(1);
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=25;
								mode = false;
							}
							else return Error(token);
						break;
						case 162:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(188);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 163:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ")" or ",")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 164:
							if(token.Type is " " or ";" or "{" or "=>")
							{
								tokens=PopToken(4);
								values=PopValue(3);
								Method.ReturnTypeFullName=values[1] as string[];
								Method.Name=tokens[1].Value_String;
								Method.UpdateAttributes(values[0] as List<string>);
								ValueStack.Push(null);
								symbol=18;
								mode = false;
							}
							else return Error(token);
						break;
						case 165:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 166:
							if(token.Type is ";" or ")" or ",")
							{
								tokens=PopToken(1);
								values=PopValue(3);
								value=new Command_Set(values[0] as ICommand,values[2] as ICommand);
								ValueStack.Push(value);
								symbol=27;
								mode = false;
							}
							else return Error(token);
						break;
						case 167:
							if(token.Type is ":")
							{
								TokenStack.Push(token);
								StateStack.Push(191);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 168:
							if(token.Type is "&&")
							{
								TokenStack.Push(token);
								StateStack.Push(110);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||")
							{
								tokens=PopToken(1);
								values=PopValue(3);
								value=new Command_Or(values[0] as ICommand,values[2] as ICommand);
								ValueStack.Push(value);
								symbol=31;
								mode = false;
							}
							else return Error(token);
						break;
						case 169:
							if(token.Type is "==")
							{
								TokenStack.Push(token);
								StateStack.Push(111);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "!=")
							{
								TokenStack.Push(token);
								StateStack.Push(112);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&")
							{
								tokens=PopToken(1);
								values=PopValue(3);
								value=new Command_And(values[0] as ICommand,values[2] as ICommand);
								ValueStack.Push(value);
								symbol=33;
								mode = false;
							}
							else return Error(token);
						break;
						case 170:
							if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=")
							{
								tokens=PopToken(1);
								values=PopValue(3);
								value=new Command_CompareOperator(values[0] as ICommand,values[2] as ICommand,"==");
								ValueStack.Push(value);
								symbol=35;
								mode = false;
							}
							else return Error(token);
						break;
						case 171:
							if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=")
							{
								tokens=PopToken(1);
								values=PopValue(3);
								value=new Command_CompareOperator(values[0] as ICommand,values[2] as ICommand,"!=");
								ValueStack.Push(value);
								symbol=35;
								mode = false;
							}
							else return Error(token);
						break;
						case 172:
							if(token.Type is "+")
							{
								TokenStack.Push(token);
								StateStack.Push(115);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "-")
							{
								TokenStack.Push(token);
								StateStack.Push(116);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=")
							{
								tokens=PopToken(1);
								values=PopValue(3);
								value=new Command_CompareOperator(values[0] as ICommand,values[2] as ICommand,"<");
								ValueStack.Push(value);
								symbol=37;
								mode = false;
							}
							else return Error(token);
						break;
						case 173:
							if(token.Type is "+")
							{
								TokenStack.Push(token);
								StateStack.Push(115);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "-")
							{
								TokenStack.Push(token);
								StateStack.Push(116);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=")
							{
								tokens=PopToken(1);
								values=PopValue(3);
								value=new Command_CompareOperator(values[0] as ICommand,values[2] as ICommand,">");
								ValueStack.Push(value);
								symbol=37;
								mode = false;
							}
							else return Error(token);
						break;
						case 174:
							if(token.Type is "*")
							{
								TokenStack.Push(token);
								StateStack.Push(117);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "/")
							{
								TokenStack.Push(token);
								StateStack.Push(118);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "%")
							{
								TokenStack.Push(token);
								StateStack.Push(119);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-")
							{
								tokens=PopToken(1);
								values=PopValue(3);
								value=new Command_Operator2(values[0] as ICommand,values[2] as ICommand,"+");
								ValueStack.Push(value);
								symbol=39;
								mode = false;
							}
							else return Error(token);
						break;
						case 175:
							if(token.Type is "*")
							{
								TokenStack.Push(token);
								StateStack.Push(117);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "/")
							{
								TokenStack.Push(token);
								StateStack.Push(118);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "%")
							{
								TokenStack.Push(token);
								StateStack.Push(119);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-")
							{
								tokens=PopToken(1);
								values=PopValue(3);
								value=new Command_Operator2(values[0] as ICommand,values[2] as ICommand,"-");
								ValueStack.Push(value);
								symbol=39;
								mode = false;
							}
							else return Error(token);
						break;
						case 176:
							if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(120);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(1);
								values=PopValue(3);
								value=new Command_Operator2(values[0] as ICommand,values[2] as ICommand,"*");
								ValueStack.Push(value);
								symbol=41;
								mode = false;
							}
							else return Error(token);
						break;
						case 177:
							if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(120);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(1);
								values=PopValue(3);
								value=new Command_Operator2(values[0] as ICommand,values[2] as ICommand,"/");
								ValueStack.Push(value);
								symbol=41;
								mode = false;
							}
							else return Error(token);
						break;
						case 178:
							if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(120);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(1);
								values=PopValue(3);
								value=new Command_Operator2(values[0] as ICommand,values[2] as ICommand,"%");
								ValueStack.Push(value);
								symbol=41;
								mode = false;
							}
							else return Error(token);
						break;
						case 179:
							if(token.Type is ";" or "." or "(" or ")" or "," or "=" or "?" or ":" or "||" or "&&" or "==" or "!=" or "<" or ">" or "+" or "-" or "*" or "/" or "%")
							{
								tokens=PopToken(2);
								values=PopValue(2);
								value=new Command_Call(values[0] as ICommand,(values[1] as List<ICommand>).ToArray());
								ValueStack.Push(value);
								symbol=43;
								mode = false;
							}
							else return Error(token);
						break;
						case 180:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 181:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 182:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 183:
							if(token.Type is " " or "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if" or "else")
							{
								tokens=PopToken(1);
								value=new List<ICommand>();
								ValueStack.Push(value);
								symbol=54;
								mode = false;
							}
							else return Error(token);
						break;
						case 184:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 185:
							if(token.Type is " " or "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if" or "else")
							{
								values=PopValue(1);
								value=new List<ICommand>();
								(value as List<ICommand>).Add(values[0] as ICommand);
								ValueStack.Push(value);
								symbol=54;
								mode = false;
							}
							else return Error(token);
						break;
						case 186:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "while")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 187:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 188:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(199);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 189:
							if(token.Type is ")" or ",")
							{
								values=PopValue(3);
								
								ValueStack.Push(null);
								symbol=22;
								mode = false;
							}
							else return Error(token);
						break;
						case 190:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 191:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 192:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 193:
							if(token.Type is ";")
							{
								TokenStack.Push(token);
								StateStack.Push(203);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 194:
							if(token.Type is ")")
							{
								TokenStack.Push(token);
								StateStack.Push(204);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 195:
							if(token.Type is "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if")
							{
								values=PopValue(1);
								value=new List<ICommand>();
								ValueStack.Push(value);
								symbol=55;
								mode = false;
							}
							else return Error(token);
						break;
						case 196:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "for")
							{
								TokenStack.Push(token);
								StateStack.Push(123);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "while")
							{
								TokenStack.Push(token);
								StateStack.Push(124);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "do")
							{
								TokenStack.Push(token);
								StateStack.Push(125);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "if")
							{
								TokenStack.Push(token);
								StateStack.Push(126);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "}")
							{
								TokenStack.Push(token);
								StateStack.Push(205);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 197:
							if(token.Type is "while")
							{
								TokenStack.Push(token);
								StateStack.Push(207);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 198:
							if(token.Type is ")")
							{
								TokenStack.Push(token);
								StateStack.Push(208);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 199:
							if(token.Type is " " or ")" or ",")
							{
								tokens=PopToken(2);
								values=PopValue(1);
								value=new Parameter(values[0] as string[],tokens[1].Value_String);
								Method.InsertParameter(value as Parameter);
								ValueStack.Push(value);
								symbol=23;
								mode = false;
							}
							else return Error(token);
						break;
						case 200:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ")" or ",")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 201:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 202:
							if(token.Type is ")" or ",")
							{
								tokens=PopToken(1);
								values=PopValue(3);
								value=values[0];
								(value as List<ICommand>).Add(values[2] as ICommand);
								ValueStack.Push(value);
								symbol=48;
								mode = false;
							}
							else return Error(token);
						break;
						case 203:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 204:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or "Symbol" or "{" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 205:
							if(token.Type is " " or "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if" or "else")
							{
								tokens=PopToken(2);
								values=PopValue(1);
								value=values[0];
								ValueStack.Push(value);
								symbol=54;
								mode = false;
							}
							else return Error(token);
						break;
						case 206:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 207:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 208:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or "Symbol" or "{" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 209:
							if(token.Type is ")" or ",")
							{
								tokens=PopToken(1);
								values=PopValue(4);
								
								ValueStack.Push(null);
								symbol=22;
								mode = false;
							}
							else return Error(token);
						break;
						case 210:
							if(token.Type is ";" or ")" or "," or "=" or ":")
							{
								tokens=PopToken(2);
								values=PopValue(5);
								value=new Command_If3(values[0] as ICommand,values[2] as ICommand,values[4] as ICommand);
								ValueStack.Push(value);
								symbol=29;
								mode = false;
							}
							else return Error(token);
						break;
						case 211:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 212:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "for")
							{
								TokenStack.Push(token);
								StateStack.Push(123);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "while")
							{
								TokenStack.Push(token);
								StateStack.Push(124);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "do")
							{
								TokenStack.Push(token);
								StateStack.Push(125);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "if")
							{
								TokenStack.Push(token);
								StateStack.Push(126);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";")
							{
								TokenStack.Push(token);
								StateStack.Push(183);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "{")
							{
								TokenStack.Push(token);
								StateStack.Push(184);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 213:
							if(token.Type is "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if")
							{
								values=PopValue(3);
								value=values[0];
								(value as List<ICommand>).Add(values[1] as ICommand);
								ValueStack.Push(value);
								symbol=55;
								mode = false;
							}
							else return Error(token);
						break;
						case 214:
							if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(218);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 215:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "for")
							{
								TokenStack.Push(token);
								StateStack.Push(123);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "while")
							{
								TokenStack.Push(token);
								StateStack.Push(124);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "do")
							{
								TokenStack.Push(token);
								StateStack.Push(125);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "if")
							{
								TokenStack.Push(token);
								StateStack.Push(126);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";")
							{
								TokenStack.Push(token);
								StateStack.Push(183);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "{")
							{
								TokenStack.Push(token);
								StateStack.Push(184);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 216:
							if(token.Type is ";")
							{
								TokenStack.Push(token);
								StateStack.Push(220);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 217:
							if(token.Type is " " or "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if" or "else")
							{
								tokens=PopToken(3);
								values=PopValue(4);
								value=new Command_While(values[1] as ICommand,(values[3] as List<ICommand>).ToArray());
								ValueStack.Push(value);
								symbol=51;
								mode = false;
							}
							else return Error(token);
						break;
						case 218:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 219:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "else")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 220:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Symbol" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 221:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 222:
							if(token.Type is "else")
							{
								TokenStack.Push(token);
								StateStack.Push(225);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 223:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 224:
							if(token.Type is ")")
							{
								TokenStack.Push(token);
								StateStack.Push(227);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 225:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or "Symbol" or "{" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 226:
							if(token.Type is ")")
							{
								TokenStack.Push(token);
								StateStack.Push(229);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 227:
							if(token.Type is ";")
							{
								TokenStack.Push(token);
								StateStack.Push(230);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 228:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "for")
							{
								TokenStack.Push(token);
								StateStack.Push(123);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "while")
							{
								TokenStack.Push(token);
								StateStack.Push(124);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "do")
							{
								TokenStack.Push(token);
								StateStack.Push(125);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "if")
							{
								TokenStack.Push(token);
								StateStack.Push(126);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";")
							{
								TokenStack.Push(token);
								StateStack.Push(183);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "{")
							{
								TokenStack.Push(token);
								StateStack.Push(184);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 229:
							if(token.Type is " ")
							{
								TokenStack.Push(token);
								StateStack.Push(9);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";" or "Symbol" or "{" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if")
							{
								
								ValueStack.Push(null);
								symbol=2;
								mode = false;
							}
							else return Error(token);
						break;
						case 230:
							if(token.Type is " " or "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if" or "else")
							{
								tokens=PopToken(5);
								values=PopValue(6);
								value=new Command_DoWhile(values[5] as ICommand,(values[1] as List<ICommand>).ToArray());
								ValueStack.Push(value);
								symbol=52;
								mode = false;
							}
							else return Error(token);
						break;
						case 231:
							if(token.Type is " " or "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if" or "else")
							{
								tokens=PopToken(4);
								values=PopValue(7);
								value=new Command_If2(values[1] as ICommand,(values[3] as List<ICommand>).ToArray(),(values[6] as List<ICommand>).ToArray());
								ValueStack.Push(value);
								symbol=53;
								mode = false;
							}
							else return Error(token);
						break;
						case 232:
							if(token.Type is "Symbol")
							{
								TokenStack.Push(token);
								StateStack.Push(45);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "void")
							{
								TokenStack.Push(token);
								StateStack.Push(48);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "char")
							{
								TokenStack.Push(token);
								StateStack.Push(49);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "byte")
							{
								TokenStack.Push(token);
								StateStack.Push(50);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "int")
							{
								TokenStack.Push(token);
								StateStack.Push(51);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "double")
							{
								TokenStack.Push(token);
								StateStack.Push(52);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "string")
							{
								TokenStack.Push(token);
								StateStack.Push(53);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "(")
							{
								TokenStack.Push(token);
								StateStack.Push(71);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "UInt32")
							{
								TokenStack.Push(token);
								StateStack.Push(72);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Int32")
							{
								TokenStack.Push(token);
								StateStack.Push(73);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Double")
							{
								TokenStack.Push(token);
								StateStack.Push(74);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "Char")
							{
								TokenStack.Push(token);
								StateStack.Push(75);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "String")
							{
								TokenStack.Push(token);
								StateStack.Push(76);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "true")
							{
								TokenStack.Push(token);
								StateStack.Push(77);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "false")
							{
								TokenStack.Push(token);
								StateStack.Push(78);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "for")
							{
								TokenStack.Push(token);
								StateStack.Push(123);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "while")
							{
								TokenStack.Push(token);
								StateStack.Push(124);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "do")
							{
								TokenStack.Push(token);
								StateStack.Push(125);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "if")
							{
								TokenStack.Push(token);
								StateStack.Push(126);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is ";")
							{
								TokenStack.Push(token);
								StateStack.Push(183);
								mode = true;
								token = tokenizer.Get();
							}
							else if(token.Type is "{")
							{
								TokenStack.Push(token);
								StateStack.Push(184);
								mode = true;
								token = tokenizer.Get();
							}
							else return Error(token);
						break;
						case 233:
							if(token.Type is " " or "Symbol" or "}" or "void" or "char" or "byte" or "int" or "double" or "string" or "(" or "UInt32" or "Int32" or "Double" or "Char" or "String" or "true" or "false" or "for" or "while" or "do" or "if" or "else")
							{
								tokens=PopToken(5);
								values=PopValue(8);
								value=new Command_For(values[1] as ICommand,values[3] as ICommand,values[5] as ICommand,(values[7] as List<ICommand>).ToArray());
								ValueStack.Push(value);
								symbol=50;
								mode = false;
							}
							else return Error(token);
						break;
	                    default:
	                        return Error(token);
	                }
	            }
	            else
	            {
	                int vt=VariableTable[StateStack.Peek(),symbol];
	                if(vt<0)return Error(token);
	                StateStack.Push(vt);
					mode = true;
	            }
	        }
	    }
	    private ParsingFile File;
		private List<string> NamespaceName;
		private void UsingNamespace()
		{
		    string name=string.Join(".", NamespaceName);
		    if (File.Usings.ContainsKey(name)) File.Errors.Add($"Found Using Conflict");
		    else File.Usings[name] = NamespaceName.ToArray();
		}
		private void DefineNamespace()
		{
		    string[] names = NamespaceName.ToArray();
		    Namespace.Name=string.Join(".",NamespaceName);
		    for(int i=NamespaceName.Count-2;i>=0;i--)
		    {
		        UserNamespace @namespace = new();
		        @namespace.Namespaces[names[i]] = Namespace;
		        @namespace.Name = string.Join(".", names[0..i]);
		        Namespace = @namespace;
		    }
		}
		private UserNamespace Namespace;
		private UserType Type;
		private UserField Field;
		private UserMethod Method;
		private SearchingNode_Root Root;
	}
}
